// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       User[]
  permissions Permission[]
}

model Permission {
  id    Int    @id @default(autoincrement())
  name  String @unique
  roles Role[]
}

model User {
  id                  Int                 @id @default(autoincrement())
  email               String              @unique
  password            String
  first_name          String
  last_name           String
  date_of_birth       DateTime            @db.Date
  type                UserType
  activated           Boolean             @default(false)
  phone               String
  avatar              String?
  student             Student?
  teacher             Teacher?
  staff               Staff?
  roles               Role[]
  owned_projects      Project[]           @relation("ownership")
  member_in_projects  Project[]           @relation("membership")
  supervised_projects Project[]           @relation("supervision")
  ProjectHistory      ProjectHistory[]
  ProjectValidation   ProjectValidation[]
  ProjectTask         ProjectTask[]
}

enum UserType {
  student
  teacher
  staff
}

model Student {
  id               Int           @id
  user             User          @relation(fields: [id], references: [id])
  registration_num String
  establishment_id Int
  establishement   Establishment @relation(fields: [establishment_id], references: [id])
  filiere          String
  specialty        String
}

model Teacher {
  id               Int           @id
  user             User          @relation(fields: [id], references: [id])
  registration_num String
  establishment_id Int
  establishement   Establishment @relation(fields: [establishment_id], references: [id])
  grade            String
  specialty        String
}

model Staff {
  id    Int    @id
  user  User   @relation(fields: [id], references: [id])
  grade String
}

model Establishment {
  id       Int    @id @default(autoincrement())
  name     String
  location String

  Student Student[]
  Teacher Teacher[]
}

model Project {
  id           Int         @id @default(autoincrement())
  type         ProjectType
  resume       String
  brand_name   String
  product_name String
  logo         String?
  created_at   DateTime    @default(now())

  owner_id        Int
  owner           User                @relation(fields: [owner_id], references: [id], name: "ownership")
  supervisors     User[]              @relation(name: "supervision")
  validation      ProjectValidation[]
  members         User[]              @relation(name: "membership")
  history         ProjectHistory[]
  ProjectInvitees ProjectInvitees[]
  ProjectTask     ProjectTask[]
}

enum ProjectType {
  startup
  patent
}

model ProjectHistory {
  id Int @id @default(autoincrement())

  project_id Int
  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
  user_id    Int
  user       User    @relation(fields: [user_id], references: [id])

  field      String
  old_value  String
  new_value  String
  changed_at DateTime @default(now())
}

model ProjectValidation {
  id         Int     @id @default(autoincrement())
  project_id Int
  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)

  decision    ProjectValidationDecision
  reservation ProjectValidationReservation?
  note        String
  created_at  DateTime                      @default(now())

  validator_id Int
  validator    User @relation(fields: [validator_id], references: [id])
}

model ProjectInvitees {
  id         Int     @id @default(autoincrement())
  project_id Int
  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)

  type  ProjectInvitationType
  email String                @unique
  token String
}

model ProjectTask {
  id         Int     @id @default(autoincrement())
  project_id Int
  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  title String
  description String
  deadline DateTime @db.Date
  resources String[]
  
}

model Settings {
  id Int @id @default(autoincrement())

  tag String @unique
  value Json
}

enum ProjectInvitationType {
  member
  supervisor
}

enum ProjectValidationDecision {
  favorable
  unfavorable
  accepted_with_reservation
}

enum ProjectValidationReservation {
  major
  minor
}
