// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       User[]
  permissions Permission[]
}

model Permission {
  id    Int    @id @default(autoincrement())
  name  String @unique
  roles Role[]
}

model User {
  id                          Int                    @id @default(autoincrement())
  email                       String                 @unique
  password                    String
  first_name                  String
  last_name                   String
  date_of_birth               DateTime               @db.Date
  type                        UserType
  activated                   Boolean                @default(false)
  phone                       String
  avatar                      String?
  student                     Student?
  teacher                     Teacher?
  staff                       Staff?
  roles                       Role[]
  owned_projects              Project[]              @relation("ownership")
  member_in_projects          Project[]              @relation("membership")
  supervised_projects         Project[]              @relation("supervision")
  co_supervised_projects      Project[]              @relation("co_supervision")
  ProjectValidation           ProjectValidation[]
  given_project_tasks         ProjectTask[]
  authorized_project_defenses DefenseAuthorization[]
  reported_project_progress   ProjectProgress[]
  comments                    Comment[]
  project_jury_president      DefensePlanification[]
  project_jury_members        DefensePlanification[] @relation("jury_membership")
  peoject_jury_ivities        DefensePlanification[] @relation("invitation")
  memberEvaluation Evaluation?

}

enum UserType {
  student
  teacher
  staff

}

model Student {
  id               Int           @id
  user             User          @relation(fields: [id], references: [id], onDelete: Cascade)
  registration_num String
  establishment_id Int
  establishement   Establishment @relation(fields: [establishment_id], references: [id])
  filiere          String
  specialty        String
}

model Teacher {
  id               Int           @id
  user             User          @relation(fields: [id], references: [id], onDelete: Cascade)
  registration_num String
  establishment_id Int
  establishement   Establishment @relation(fields: [establishment_id], references: [id])
  grade            String
  specialty        String
}

model Staff {
  id    Int    @id
  user  User   @relation(fields: [id], references: [id], onDelete: Cascade)
  grade String
}

model Establishment {
  id       Int    @id @default(autoincrement())
  name     String
  location String

  Student Student[]
  Teacher Teacher[]
  announcements Announcement[]
}

model Project {
  id           Int         @id @default(autoincrement())
  type         ProjectType
  resume       String
  brand_name   String
  product_name String
  logo         String?
  created_at   DateTime    @default(now())

  owner_id             Int
  owner                User                  @relation(fields: [owner_id], references: [id], name: "ownership")
  supervisors          User[]                @relation(name: "supervision")
  co_supervisor_id     Int?
  co_supervisor        User?                 @relation(fields: [co_supervisor_id], references: [id], name: "co_supervision")
  validation           ProjectValidation[]
  members              User[]                @relation(name: "membership")
  history              ProjectHistory[]
  ProjectInvitees      ProjectInvitees[]
  ProjectTask          ProjectTask[]
  DefenseAuthorization DefenseAuthorization?
  DefenseDocument      DefenseDocument?
  ProjectProgress      ProjectProgress[]
  DefensePlanification              DefensePlanification?
  Delibration Delibration?
  ProjectReserve ProjectReserve?
}

enum ProjectType {
  startup
  patent
}

model ProjectHistory {
  id Int @id @default(autoincrement())

  project_id Int
  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)

  field      String
  old_value  String
  new_value  String
  changed_at DateTime @default(now())
}

model ProjectValidation {
  id         Int     @id @default(autoincrement())
  project_id Int
  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)

  decision    ProjectValidationDecision
  reservation ProjectValidationReservation?
  note        String
  created_at  DateTime                      @default(now())

  validator_id Int
  validator    User @relation(fields: [validator_id], references: [id])
}

model ProjectInvitees {
  id         Int     @id @default(autoincrement())
  project_id Int
  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)

  type  ProjectInvitationType
  email String
  token String
}

model ProjectTask {
  id         Int     @id @default(autoincrement())
  project_id Int
  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  title        String
  description  String
  deadline     DateTime      @db.Date
  resources    String[]
  TaskFinished TaskFinished?
  comments     Comment[]
}

model ProjectProgress {
  id         Int      @id @default(autoincrement())
  project_id Int
  project    Project  @relation(fields: [project_id], references: [id], onDelete: Cascade)
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  percentage Int
  note       String
  created_at DateTime @default(now())
}

model Settings {
  id Int @id @default(autoincrement())

  tag   String @unique
  value Json
}

model DefenseAuthorization {
  id         Int     @id @default(autoincrement())
  project_id Int     @unique
  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)

  supervisor_id Int
  supervisor    User @relation(fields: [supervisor_id], references: [id])

  uploadedFile String
}

model DefenseDocument {
  id         Int     @id @default(autoincrement())
  project_id Int     @unique
  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
  bmc        String
  memoire    String
  label      String
}

model DefensePlanification {
  id Int @id @default(autoincrement())

  project_id Int     @unique
  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)

  jury_president_id Int?
  president      User? @relation(fields: [jury_president_id], references: [id], onDelete: Cascade)

  jury_members User[] @relation("jury_membership")

  jury_invities User[] @relation("invitation")

  date              DateTime
  location String?
  mode              DefenseMode
  nature            DefenseNature
  DefenseInvitees   DefenseInvitees[]
}

model DefenseInvitees {
id         Int @id @default(autoincrement())

defensePlan_id  Int
defensePlanification DefensePlanification @relation(fields: [defensePlan_id], references: [id], onDelete: Cascade)

type DefenseInvitationType
email String
}

enum DefenseInvitationType {
    member
    president
    invite
}

enum ProjectInvitationType {
  member
  supervisor
  co_supervisor
}

enum ProjectValidationDecision {
  favorable
  unfavorable
  accepted_with_reservation
}

enum ProjectValidationReservation {
  major
  minor
}

enum DefenseMode {
  onsite
  online
}

enum DefenseNature {
  public
  private
}

model Comment {
  id      Int         @id @default(autoincrement())
  task_id Int
  task    ProjectTask @relation(fields: [task_id], references: [id], onDelete: Cascade)

  author_id Int
  author    User @relation(fields: [author_id], references: [id])

  body       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
}

model TaskFinished {
  id          Int         @id @default(autoincrement())
  task_id     Int         @unique
  task        ProjectTask @relation(fields: [task_id], references: [id], onDelete: Cascade)
  description String
  resources   String[]
}

model Announcement {
    id                  Int       @id @default(autoincrement())
    title               String
    description         String
    dateStart           DateTime @db.Date
    dateEnd             DateTime @db.Date
    establishement      Establishment[]
    image               String
}

model Delibration {
    id          Int         @id @default(autoincrement())
    project_id Int     @unique
    project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)  
    status DelibrationStatus
    reservation ProjectReserve?
    evaluations Evaluation[]

    
}
enum DelibrationStatus {
    accepted_with_reservation
    accepted 
    refused
}
model Evaluation {
    id          Int         @id @default(autoincrement())
    member_id Int @unique
    member User @relation(fields: [member_id], references: [id], onDelete: Cascade)
    delibration_id Int 
    Delibration Delibration @relation(fields: [delibration_id],references: [id], onDelete: Cascade)
    note Float 
    appreciation String
}
model ProjectReserve {
     id          Int         @id @default(autoincrement())
     project_id Int     @unique
     project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)  
     delibration_id Int @unique
     Delibration Delibration @relation(fields: [delibration_id],references: [id])
     description String
     documents String[]
     reserveLifting Boolean @default(false)
     
}
